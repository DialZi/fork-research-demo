/*
jenkins:localhost:8080

defect dojo: localhost:8081 >>>> update port in docker compose file. default = 8080
  git clone https://github.com/DefectDojo/django-DefectDojo

sonarqube: localhost:9000
  get api key.
  set sonarqube api key in jenkins and defect dojo
  defect dojo set sonarqube api key: 
    url: Home/Tool Configuration List/Edit Tool Configuration
    set url=http://{sonarqube}/api, toolType=SonarQube, authentication type=API Key, username+API Key = sonarqube API Key

ports:
8080  jenkins
8081  defect dojo
9000  sonarqube




*/


pipeline{
  agent any
  tools {
    maven 'Maven'
  }

  environment {
        DEFECT_DOJO_ENGAGEMENT_ID = '7'
        DEFECT_DOJO_IP = 'http://172.16.1.4:8081'
        DEFECT_DOJO_KEY = credentials('defectDojoApiKey')
        JAVA_PROJECT_NAME= 'demoProject-0.0.1'
        JENKINS_PROJECT_NAME = 'demo'
        DEPENDENCY_CHECK_URL = 'https://raw.githubusercontent.com/domi810/demo/master/owasp-dependency-check.sh'
        CLAIR_SCANNER_URL = 'https://raw.githubusercontent.com/domi810/demo/master/clair-scanner_linux_386'
    }
  stages{
      stage ('INIT'){
        steps {
        //workarounds for testing
        sh 'docker-compose -f /home/domi/django-DefectDojo/docker-compose.yml up -d || true'
        sh 'docker run -d -p 9000:9000 --name sonarqube_jenkins sonarqube || true'
        sh 'docker container start sonarqube_jenkins || true'
        }

      }

      stage ('SCA') {

        steps {
          //remove file if exists
         sh 'rm owasp* || true'
         //get newest script
         sh 'wget ${DEPENDENCY_CHECK_URL}'
         //make executable
         sh 'chmod +x owasp-dependency-check.sh'
         //run script
         sh 'bash owasp-dependency-check.sh'
         sh 'docker container stop dependency_check || true'
         //cat for testing
         //sh 'cat /home/jenkins/workspace/${JENKINS_PROJECT_NAME}/dependency-check-report.xml'
         ///upload to defect dojo
         sh 'curl -X POST "${DEFECT_DOJO_IP}/api/v2/import-scan/"  -H "Authorization: Token ${DEFECT_DOJO_KEY}"  -H  "accept: application/json" -H   "Content-Type: multipart/form-data" -F "minimum_severity=Info" -F "active=true" -F "verified=true" -F "scan_type=Dependency Check Scan" -F "file=@/home/jenkins/workspace/${JENKINS_PROJECT_NAME}/dependency-check-report.xml;type=text/xml" -F "engagement=${DEFECT_DOJO_ENGAGEMENT_ID}" -F "close_old_findings=false" -F "push_to_jira=false"'
      }
    }

      stage ('SAST'){
          parallel{
            stage ('SONARQUBE') {
            steps {
              //run sonarqube
              withSonarQubeEnv('sonarserver') {
                sh 'mvn sonar:sonar'
                sh 'cat target/sonar/report-task.txt'
              }
              //trigger defect dojo sonarqube api import
              sh 'curl -X POST "${DEFECT_DOJO_IP}/api/v2/import-scan/"  -H "Authorization: Token ${DEFECT_DOJO_KEY}"  -H  "accept: application/json" -H   "Content-Type: multipart/form-data" -F "minimum_severity=Info" -F "active=true" -F "verified=true" -F "scan_type=SonarQube API Import" -F "engagement=${DEFECT_DOJO_ENGAGEMENT_ID}" -F "close_old_findings=false" -F "push_to_jira=false"'
        
            }
        }
       stage ('SHIFT LEFT') {
            steps {
              //run shif left scan
              sh 'docker run --rm -e "WORKSPACE=${PWD}" -v $PWD:/app shiftleft/sast-scan scan --name shift_left_scan --build --out_dir /app/reports || true'
              //upload to defect dojo
              sh 'curl -X POST "${DEFECT_DOJO_IP}/api/v2/import-scan/"  -H "Authorization: Token ${DEFECT_DOJO_KEY}"  -H  "accept: application/json" -H   "Content-Type: multipart/form-data" -F "minimum_severity=Info" -F "active=true" -F "verified=true" -F "scan_type=SARIF" -F "file=@/home/jenkins/workspace/${JENKINS_PROJECT_NAME}/reports/bash-report.sarif;type=text/xml" -F "engagement=${DEFECT_DOJO_ENGAGEMENT_ID}" -F "close_old_findings=false" -F "push_to_jira=false"'
              sh 'curl -X POST "${DEFECT_DOJO_IP}/api/v2/import-scan/"  -H "Authorization: Token ${DEFECT_DOJO_KEY}"  -H  "accept: application/json" -H   "Content-Type: multipart/form-data" -F "minimum_severity=Info" -F "active=true" -F "verified=true" -F "scan_type=SARIF" -F "file=@/home/jenkins/workspace/${JENKINS_PROJECT_NAME}/reports/class-report.sarif;type=text/xml" -F "engagement=${DEFECT_DOJO_ENGAGEMENT_ID}" -F "close_old_findings=false" -F "push_to_jira=false"'
              sh 'curl -X POST "${DEFECT_DOJO_IP}/api/v2/import-scan/"  -H "Authorization: Token ${DEFECT_DOJO_KEY}"  -H  "accept: application/json" -H   "Content-Type: multipart/form-data" -F "minimum_severity=Info" -F "active=true" -F "verified=true" -F "scan_type=SARIF" -F "file=@/home/jenkins/workspace/${JENKINS_PROJECT_NAME}/reports/source-java-report.sarif;type=text/xml" -F "engagement=${DEFECT_DOJO_ENGAGEMENT_ID}" -F "close_old_findings=false" -F "push_to_jira=false"'
              sh 'curl -X POST "${DEFECT_DOJO_IP}/api/v2/import-scan/"  -H "Authorization: Token ${DEFECT_DOJO_KEY}"  -H  "accept: application/json" -H   "Content-Type: multipart/form-data" -F "minimum_severity=Info" -F "active=true" -F "verified=true" -F "scan_type=SARIF" -F "file=@/home/jenkins/workspace/${JENKINS_PROJECT_NAME}/reports/source-sql-report.sarif;type=text/xml" -F "engagement=${DEFECT_DOJO_ENGAGEMENT_ID}" -F "close_old_findings=false" -F "push_to_jira=false"'

            }
        }

          }
      }
      

    stage ('Build'){
        steps{
          sh 'mvn clean package'
        }
    }

    stage ('DEPLOY TO TOMCAT'){
      steps{
        //stop test container if already started
        sh 'docker container stop apptest || true'
        //create network
        sh 'docker network create zapnet || true'
        //change name of the war file do run the app under the root path
        sh 'cd target && ls -l'
        sh 'mv target/${JAVA_PROJECT_NAME}.war target/ROOT.war'
        sh 'cd target && ls -l'
        //start docker with the test war. make sure folder is owned by same uid as user zap in docker
        sh 'docker run --net zapnet -d -p 8085:8080 --rm -v /home/jenkins/workspace/${JENKINS_PROJECT_NAME}/target/ROOT.war:/usr/local/tomcat/webapps/ROOT.war --name apptest tomcat'
        //make sure app is runnig
        sleep(time:10,unit:"SECONDS")
        sh 'docker run --net zapnet --rm curlimages/curl http://apptest:8080/'
      }
     }

    stage ('DAST'){
      steps{
        //run zap docker. go on on error
        sh 'docker run --net zapnet --rm -v $(pwd)/zap:/zap/wrk:rw  -t owasp/zap2docker-stable zap-full-scan.py -t http://apptest:8080/ -j -g gen.conf -x zap_report.xml || true'
        //upload to defect dojo
        sh 'curl -X POST "${DEFECT_DOJO_IP}/api/v2/import-scan/"  -H "Authorization: Token ${DEFECT_DOJO_KEY}"  -H  "accept: application/json" -H   "Content-Type: multipart/form-data" -F "minimum_severity=Info" -F "active=true" -F "verified=true" -F "scan_type=ZAP Scan" -F "file=@/home/jenkins/workspace/${JENKINS_PROJECT_NAME}/zap/zap_report.xml;type=text/xml" -F "engagement=${DEFECT_DOJO_ENGAGEMENT_ID}" -F "close_old_findings=false" -F "push_to_jira=false"'
        //stop test container
        sh 'docker container stop apptest'
      }
    }

    stage ('DOCKER IMAGE'){
      steps{
        //get newest binary
        sh 'wget ${CLAIR_SCANNER_URL}'
        //make executable
        sh 'chmod +x clair-scanner_linux_386'
        //run clair containers
        sh 'docker run --rm -p 5432:5432 -d --name clair_db arminc/clair-db:latest || true'
        sh 'docker run --rm -p 6060:6060 --link db:postgres -d --name clair arminc/clair-local-scan:latest || true'
        //scan image
        sh './clair-scanner_linux_386  --ip 172.17.0.1 -r clair_report.json postgres || true'
        sh 'cat clair_report.json'
        //stop clair containers
        sh 'docker container stop clair_db'
        sh 'docker container stop clair'
        //upload to defect dojo
        sh 'curl -X POST "${DEFECT_DOJO_IP}/api/v2/import-scan/"  -H "Authorization: Token ${DEFECT_DOJO_KEY}"  -H  "accept: application/json" -H   "Content-Type: multipart/form-data" -F "minimum_severity=Info" -F "active=true" -F "verified=true" -F "scan_type=Clair Scan" -F "file=@/home/jenkins/workspace/${JENKINS_PROJECT_NAME}/clair_report.json;type=text/xml" -F "engagement=${DEFECT_DOJO_ENGAGEMENT_ID}" -F "close_old_findings=false" -F "push_to_jira=false"'
      }
    }
  }
}