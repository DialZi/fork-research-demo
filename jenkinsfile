pipeline{
  agent any
  tools {
    maven 'Maven'
  }

  environment {
        DEFECT_DOJO_ENGAGEMENT_ID = '6'
        DEFECT_DOJO_IP = 'http://172.16.1.4:8081'
        DEFECT_DOJO_KEY = credentials('defectDojoApiKey')
    }
  stages{



      stage ('SCA') {
        environment {
          my_dojoKey = credentials('defectDojoApiKey')
          my_githubKey = credentials('githubapikey')
         }
        steps {
         sh 'rm owasp* || true'
         sh 'wget "https://raw.githubusercontent.com/domi810/demo/master/owasp-dependency-check.sh"'
         sh 'chmod +x owasp-dependency-check.sh'
         sh 'bash owasp-dependency-check.sh'
         sh 'cat /home/jenkins/workspace/demo/dependency-check-report.xml'
         sh 'curl -X POST "${DEFECT_DOJO_IP}/api/v2/import-scan/"  -H "Authorization: Token ${DEFECT_DOJO_KEY}"  -H  "accept: application/json" -H   "Content-Type: multipart/form-data" -H  "X-CSRFToken: f8lbpMWg07WXb3aJq83HbQeQ8r60HVDRvxKN6SJtywc3Pp9ExtlxqKFbXwlXer12" -F "minimum_severity=Info" -F "active=true" -F "verified=true" -F "scan_type=Dependency Check Scan" -F "file=@/home/jenkins/workspace/demo/dependency-check-report.xml;type=text/xml" -F "engagement=${DEFECT_DOJO_ENGAGEMENT_ID}" -F "close_old_findings=false" -F "push_to_jira=false"'
      }
    }

      stage ('SAST') {
            steps {
              withSonarQubeEnv('sonarserver') {
                sh 'mvn sonar:sonar'
                sh 'cat target/sonar/report-task.txt'
              }
            }
          }

    stage ('Build'){
        steps{
          sh 'mvn clean package'
        }
    }
    stage ('DAST'){
      environment {
        my_dojoKey = credentials('defectDojoApiKey')
      }
      steps{
        //stop test container if already started
        sh 'docker container stop apptest || true'
        //create network
        sh 'docker network create zapnet || true'
        //start docker with the test war
        sh 'docker run --net zapnet -d -p 8085:8080 --rm -v /home/jenkins/workspace/demo/target/demoProject-0.0.1.war:/usr/local/tomcat/webapps/demoProject-0.0.1.war --name apptest tomcat'
        //make sure app is runnig
        sleep(time:5,unit:"SECONDS")
        //run zap docker. go on on error
        sh 'docker run --net zapnet --rm -v $(pwd)/zap:/zap/wrk:rw  -t owasp/zap2docker-stable zap-full-scan.py -t http://apptest:8080/demoProject-0.0.1/ -g gen.conf -x zap_report.xml || true'
        //upload to defect dojo
        sh 'curl -X POST "${DEFECT_DOJO_IP}/api/v2/import-scan/"  -H "Authorization: Token ${DEFECT_DOJO_KEY}"  -H  "accept: application/json" -H   "Content-Type: multipart/form-data" -H  "X-CSRFToken: f8lbpMWg07WXb3aJq83HbQeQ8r60HVDRvxKN6SJtywc3Pp9ExtlxqKFbXwlXer12" -F "minimum_severity=Info" -F "active=true" -F "verified=true" -F "scan_type=ZAP Scan" -F "file=@/home/jenkins/workspace/demo/zap/zap_report.xml;type=text/xml" -F "engagement=${DEFECT_DOJO_ENGAGEMENT_ID}" -F "close_old_findings=false" -F "push_to_jira=false"'
        //stop test container
        sh 'docker container stop apptest'
      }
    }
  }
}