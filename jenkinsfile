pipeline{
  agent any
  tools {
    maven 'Maven'
  }

  stages{

       /* stage ('SCA / OWASP Dependency Check') {
              environment {
        my_dojoKey = credentials('defectDojoApiKey')
        my_githubKey = credentials('githubapikey')
        def DATE = '2021-01-14'

    }
      steps {
         sh 'rm owasp* || true'
         sh 'wget "https://raw.githubusercontent.com/domi810/demo/master/owasp-dependency-check.sh"'
         sh 'chmod +x owasp-dependency-check.sh'
         sh 'bash owasp-dependency-check.sh'
         sh 'cat /home/jenkins/workspace/demo/dependency-check-report.xml'
         sh 'curl -X POST "http://172.16.1.4:8081/api/v2/import-scan/"  -H "Authorization: Token $my_dojoKey"  -H  "accept: application/json" -H   "Content-Type: multipart/form-data" -H  "X-CSRFToken: f8lbpMWg07WXb3aJq83HbQeQ8r60HVDRvxKN6SJtywc3Pp9ExtlxqKFbXwlXer12" -F "scan_date=2021-01-09" -F "minimum_severity=Info" -F "active=true" -F "verified=true" -F "scan_type=Dependency Check Scan" -F "file=@/home/jenkins/workspace/demo/dependency-check-report.xml;type=text/xml" -F "engagement=5" -F "close_old_findings=false" -F "push_to_jira=false"'

      }
    }

    stage ('Build'){
      steps{
        sh 'mvn clean package'
      }
    }*/

    stage ('DAST / OWASP ZAP'){
      steps{
        //stop test container if already started
        sh 'docker container stop apptest || true'
        //create network
        sh 'docker network create zapnet || true'
        //start docker with the test war
        sh 'docker run --net zapnet -d -p 8085:8080 --rm -v /home/jenkins/workspace/demo/target/pipeline-0.0.1-SNAPSHOT.war:/usr/local/tomcat/webapps/pipeline-0.0.1-SNAPSHOT.war --name apptest tomcat'
        //make sure app is runnig
        sleep(time:5,unit:"SECONDS")
        //run zap docker
        sh 'docker run --net zapnet -v $(pwd):/zap/wrk -t owasp/zap2docker-stable zap-baseline.py -t http://apptest:8080/pipeline-0.0.1-SNAPSHOT/ -r zap_report.html'

        //stop test container
        sh 'docker container stop apptest'
      }
    }
  }
}